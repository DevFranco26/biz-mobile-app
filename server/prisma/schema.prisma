// File: prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum enum_Users_role {
  superadmin
  admin
  supervisor
  user
}

enum enum_Subscriptions_status {
  active
  canceled
  inactive
}

model Companies {
  id              Int              @id @default(autoincrement())
  name            String
  domain          String           @unique
  createdAt       DateTime         @default(now()) @map("createdAt")
  updatedAt       DateTime         @default(now()) @map("updatedAt")
  country         String           @default("USA")
  currency        String           @default("USD")
  language        String           @default("en")
  Users           Users[]
  Leaves          Leaves[]
  Departments     Departments[]
  ShiftSchedules  ShiftSchedules[]
  PayrollSettings PayrollSettings?
  PayrollRecords  PayrollRecords[]
  Subscriptions   Subscriptions[]
  Payments        Payments[]

  @@map("Companies")
}

model Users {
  id             Int             @id @default(autoincrement())
  email          String          @unique(map: "Users_email_key")
  password       String
  role           enum_Users_role @default(user)
  createdAt      DateTime        @default(now()) @map("createdAt")
  updatedAt      DateTime        @default(now()) @map("updatedAt")
  companyId      Int?            @db.Integer
  firstName      String          @map("firstName")
  middleName     String?         @map("middleName")
  lastName       String          @map("lastName")
  phone          String?         @map("phone")
  status         Boolean         @default(false)
  presenceStatus String          @default("offline") @map("presenceStatus")
  lastActiveAt   DateTime?       @map("lastActiveAt")
  rateType       String          @default("hourly") @map("rateType")
  rateValue      Decimal         @default(0.00) @map("rateValue") @db.Decimal(10, 2)
  departmentId   Int?            @map("departmentId") @db.Integer

  company                          Companies?             @relation(fields: [companyId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Department                       Departments?           @relation("Department_Users", fields: [departmentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  SupervisedDepartments            Departments[]          @relation("Supervisor_Departments")
  TimeLogs                         TimeLogs[]
  UserSettings                     UserSettings[]
  leaveRequests                    Leaves[]               @relation("LeaveRequests")
  approvals                        Leaves[]               @relation("Approvals")
  UserShiftAssignments             UserShiftAssignments[]
  PayRates                         PayRates?
  PayrollRecords                   PayrollRecords[]
  Locations_User_Manages_Locations Locations[]            @relation("User_Manages_Locations")
  Locations_User_Updates_Locations Locations[]            @relation("User_Updates_Locations")

  // This field is the opposite side of the relation for the user who assigned a shift.
  AssignedShiftAssignments UserShiftAssignments[] @relation("assignedByUser_relation")

  @@map("Users")
}

model Departments {
  id           Int       @id @default(autoincrement())
  name         String
  companyId    Int       @map("companyId") @db.Integer
  supervisorId Int?      @map("supervisorId") @db.Integer
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @default(now()) @map("updatedAt")
  Users        Users[]   @relation("Department_Users")
  supervisor   Users?    @relation("Supervisor_Departments", fields: [supervisorId], references: [id], onDelete: SetNull)
  company      Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([name, companyId], map: "Departments_name_companyId_unique")
  @@map("Departments")
}

model Leaves {
  id              Int       @id @default(autoincrement())
  userId          Int       @map("userId")
  approverId      Int?      @map("approverId")
  type            String
  reason          String?
  fromDate        DateTime  @map("fromDate")
  toDate          DateTime  @map("toDate")
  status          String    @default("Pending")
  rejectionReason String?   @map("rejectionReason")
  companyId       Int       @map("companyId")
  createdAt       DateTime  @default(now()) @map("createdAt")
  updatedAt       DateTime  @default(now()) @map("updatedAt")
  requester       Users     @relation("LeaveRequests", fields: [userId], references: [id], onDelete: Cascade)
  approver        Users?    @relation("Approvals", fields: [approverId], references: [id], onDelete: SetNull)
  company         Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("Leaves")
}

model Locations {
  id           Int            @id @default(autoincrement())
  adminid      Int            @map("adminid")
  label        String
  latitude     Decimal        @db.Decimal(14, 10)
  longitude    Decimal        @db.Decimal(14, 10)
  radius       Int            @default(100)
  createdat    DateTime       @default(now()) @map("createdat")
  updatedat    DateTime       @default(now()) @map("updatedat")
  updatedBy    Int?           @map("updatedBy")
  admin        Users          @relation("User_Manages_Locations", fields: [adminid], references: [id], onDelete: Cascade)
  lastEditor   Users?         @relation("User_Updates_Locations", fields: [updatedBy], references: [id], onDelete: SetNull)
  UserSettings UserSettings[]

  @@map("Locations")
}

model Payments {
  id                   Int            @id @default(autoincrement())
  chargeId             String         @map("chargeId")
  amount               BigInt
  amountCaptured       BigInt?        @map("amountCaptured")
  currency             String
  paymentMethod        String?        @map("paymentMethod")
  chargeStatus         String?        @map("chargeStatus")
  createdTimestamp     DateTime       @map("createdTimestamp")
  receiptUrl           String?        @map("receiptUrl")
  billingDetails       Json?          @map("billingDetails")
  shippingDetails      Json?          @map("shippingDetails")
  balanceTransactionId String?        @map("balanceTransactionId")
  chargeDescription    String?        @map("chargeDescription")
  paymentOutcome       Json?          @map("paymentOutcome")
  paymentIntentId      String?        @map("paymentIntentId")
  receiptEmail         String?        @map("receiptEmail")
  requestId            String?        @map("requestId")
  idempotencyKey       String?        @map("idempotencyKey")
  eventType            String         @map("eventType")
  subscriptionId       Int?           @map("subscriptionId")
  companyId            Int?           @map("companyId")
  createdAt            DateTime       @default(now()) @map("createdAt")
  updatedAt            DateTime       @default(now()) @map("updatedAt")
  subscription         Subscriptions? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  company              Companies?     @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@map("Payments")
}

model PayrollRecords {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("userId")
  companyId     Int       @map("companyId")
  startDate     DateTime  @map("startDate")
  endDate       DateTime  @map("endDate")
  payType       String    @map("payType")
  hoursWorked   Decimal   @default(0.00) @map("hoursWorked") @db.Decimal(10, 2)
  overtimeHours Decimal   @default(0.00) @map("overtimeHours") @db.Decimal(10, 2)
  overtimePay   Decimal   @default(0.00) @map("overtimePay") @db.Decimal(10, 2)
  grossPay      Decimal   @default(0.00) @map("grossPay") @db.Decimal(10, 2)
  deductions    Decimal   @default(0.00) @map("deductions") @db.Decimal(10, 2)
  netPay        Decimal   @default(0.00) @map("netPay") @db.Decimal(10, 2)
  createdAt     DateTime  @default(now()) @map("createdAt")
  updatedAt     DateTime  @default(now()) @map("updatedAt")
  user          Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  company       Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("PayrollRecords")
}

model PayrollSettings {
  id           Int       @id @default(autoincrement())
  companyId    Int       @unique @map("companyId")
  cutoffCycle  String    @default("bi-weekly") @map("cutoffCycle")
  createdAt    DateTime  @default(now()) @map("createdAt")
  updatedAt    DateTime  @default(now()) @map("updatedAt")
  currency     String    @default("USD")
  overtimeRate Decimal   @default(1.5) @map("overtimeRate") @db.Decimal(10, 2)
  company      Companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("PayrollSettings")
}

model PayRates {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique @map("userId")
  payType   String   @default("hourly") @map("payType")
  rate      Decimal  @default(0.00) @map("rate") @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @default(now()) @map("updatedAt")
  user      Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("PayRates")
}

model ShiftSchedules {
  id                   Int                    @id @default(autoincrement())
  companyId            Int                    @map("companyId")
  title                String
  startTime            DateTime               @map("startTime")
  endTime              DateTime               @map("endTime")
  createdAt            DateTime               @default(now()) @map("createdAt")
  updatedAt            DateTime               @default(now()) @map("updatedAt")
  company              Companies              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  UserShiftAssignments UserShiftAssignments[]

  @@map("ShiftSchedules")
}

model SubscriptionPlans {
  id            Int             @id @default(autoincrement())
  planName      String          @map("planName")
  rangeOfUsers  String          @default("1") @map("rangeOfUsers")
  price         Decimal         @default(0.00) @map("price") @db.Decimal(10, 2)
  description   String?
  features      Json            @default("{}")
  createdAt     DateTime        @default(now()) @map("createdAt")
  updatedAt     DateTime        @default(now()) @map("updatedAt")
  Subscriptions Subscriptions[]

  @@map("SubscriptionPlans")
}

model Subscriptions {
  id                 Int                       @id @default(autoincrement())
  companyId          Int                       @map("companyId")
  planId             Int                       @map("planId")
  paymentMethod      String?                   @map("paymentMethod")
  paymentDateTime    DateTime?                 @map("paymentDateTime")
  expirationDateTime DateTime?                 @map("expirationDateTime")
  renewalDateTime    DateTime?                 @map("renewalDateTime")
  status             enum_Subscriptions_status @default(active)
  createdAt          DateTime                  @default(now()) @map("createdAt")
  updatedAt          DateTime                  @default(now()) @map("updatedAt")
  company            Companies                 @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan               SubscriptionPlans         @relation(fields: [planId], references: [id], onDelete: Restrict)
  Payments           Payments[]

  @@map("Subscriptions")
}

model TimeLogs {
  id                Int       @id @default(autoincrement())
  userId            Int       @map("userId")
  status            Boolean   @default(true)
  createdAt         DateTime  @default(now()) @map("createdAt")
  updatedAt         DateTime  @default(now()) @map("updatedAt")
  timeOutDevice     Json?     @map("timeOutDevice")
  timeInLat         Decimal?  @map("timeInLat") @db.Decimal(10, 8)
  timeInLong        Decimal?  @map("timeInLong") @db.Decimal(11, 8)
  timeOutLat        Decimal?  @map("timeOutLat") @db.Decimal(10, 8)
  timeOutLong       Decimal?  @map("timeOutLong") @db.Decimal(11, 8)
  timeInTimeZone    String?   @map("timeInTimeZone")
  timeOutTimeZone   String?   @map("timeOutTimeZone")
  timeInDevice      Json?     @map("timeInDevice")
  coffeeBreakStart  DateTime? @map("coffeeBreakStart")
  coffeeBreakEnd    DateTime? @map("coffeeBreakEnd")
  lunchBreakStart   DateTime? @map("lunchBreakStart")
  lunchBreakEnd     DateTime? @map("lunchBreakEnd")
  totalHours        Decimal?  @map("totalHours") @db.Decimal(5, 2)
  coffeeBreak2Start DateTime? @map("coffeeBreak2Start")
  coffeeBreak2End   DateTime? @map("coffeeBreak2End")
  timeInAt          DateTime? @map("timeInAt")
  timeOutAt         DateTime? @map("timeOutAt")
  user              Users     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("TimeLogs")
}

model UserShiftAssignments {
  id              Int            @id @default(autoincrement())
  userId          Int            @map("userId")
  shiftScheduleId Int            @map("shiftScheduleId")
  assignedBy      Int            @map("assignedBy")
  createdAt       DateTime       @default(now()) @map("createdAt")
  updatedAt       DateTime       @default(now()) @map("updatedAt")
  recurrence      String         @default("all")
  user            Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  shiftSchedule   ShiftSchedules @relation(fields: [shiftScheduleId], references: [id], onDelete: Cascade)
  assignedByUser  Users          @relation("assignedByUser_relation", fields: [assignedBy], references: [id], onDelete: NoAction)

  @@unique([userId, shiftScheduleId], map: "UserShiftAssignments_userId_shiftScheduleId_key")
  @@map("UserShiftAssignments")
}

model UserSettings {
  id                 Int        @id @default(autoincrement())
  userId             Int        @map("userId")
  locationId         Int?       @map("locationId")
  restrictionenabled Boolean    @map("restrictionenabled")
  createdAt          DateTime   @default(now()) @map("createdAt")
  updatedAt          DateTime   @default(now()) @map("updatedAt")
  user               Users      @relation(fields: [userId], references: [id], onDelete: Cascade)
  location           Locations? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  @@map("UserSettings")
}
